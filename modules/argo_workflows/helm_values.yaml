COMPUTED VALUES:
apiVersionOverrides:
  autoscaling: ""
  cloudgoogle: ""
  monitoring: ""
artifactRepository:
  archiveLogs: false
  azure: {}
  gcs: {}
  s3: {}
artifactRepositoryRef: {}
commonLabels: {}
controller:
  affinity: {}
  clusterWorkflowTemplates:
    enabled: true
    serviceAccounts: []
  columns: []
  configMap:
    create: true
    name: ""
  cronWorkflowWorkers: null
  deploymentAnnotations: {}
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraInitContainers: []
  image:
    registry: quay.io
    repository: argoproj/workflow-controller
    tag: ""
  initialDelay: null
  instanceID:
    enabled: false
    explicitID: ""
    useReleaseName: false
  kubeConfig: {}
  links: []
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 6060
    initialDelaySeconds: 90
    periodSeconds: 60
    timeoutSeconds: 30
  loadBalancerSourceRanges: []
  logging:
    format: text
    globallevel: "0"
    level: info
  metricsConfig:
    enabled: false
    headlessService: false
    ignoreErrors: false
    metricRelabelings: []
    metricsTTL: ""
    path: /metrics
    port: 9090
    portName: metrics
    relabelings: []
    secure: false
    servicePort: 8080
    servicePortName: metrics
    targetLabels: []
  name: workflow-controller
  namespaceParallelism: null
  navColor: ""
  nodeEvents:
    enabled: true
  nodeSelector:
    kubernetes.io/os: linux
  parallelism: null
  pdb:
    enabled: false
  persistence: {}
  podAnnotations: {}
  podCleanupWorkers: null
  podGCDeleteDelayDuration: ""
  podGCGracePeriodSeconds: null
  podLabels: {}
  podSecurityContext: {}
  priorityClassName: ""
  rbac:
    accessAllSecrets: false
    create: true
    secretWhitelist: []
    writeConfigMaps: false
  replicas: 1
  resourceRateLimit: {}
  resources: {}
  retentionPolicy: {}
  revisionHistoryLimit: 10
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  serviceAccount:
    annotations: {}
    create: true
    labels: {}
    name: ""
  serviceAnnotations: {}
  serviceLabels: {}
  serviceMonitor:
    additionalLabels: {}
    enabled: false
    namespace: "default"
  serviceType: ClusterIP
  telemetryConfig:
    enabled: false
    ignoreErrors: false
    metricsTTL: ""
    path: /telemetry
    port: 8081
    secure: false
    servicePort: 8081
    servicePortName: telemetry
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
  workflowDefaults: 
    spec:
      serviceAccountName: argo-server
  workflowNamespaces:
  - default
  workflowRestrictions: {}
  workflowTTLWorkers: null
  workflowWorkers: null
crds:
  annotations: {}
  install: true
  keep: true
createAggregateRoles: true
customArtifactRepository: {}
emissary:
  images: []
executor:
  args: []
  env: []
  image:
    pullPolicy: ""
    registry: quay.io
    repository: argoproj/argoexec
    tag: ""
  resources: {}
  securityContext: {}
extraObjects: []
fullnameOverride: null
images:
  pullPolicy: Always
  pullSecrets: []
  tag: ""
kubeVersionOverride: ""
mainContainer:
  env: []
  envFrom: []
  imagePullPolicy: ""
  resources: {}
  securityContext: {}
nameOverride: null
namespaceOverride: ""
server:
  extraArgs:
  - --auth-mode=${auth_mode}
  - --secure=false
  GKEbackendConfig:
    enabled: false
    spec: {}
  GKEfrontendConfig:
    enabled: false
    spec: {}
  GKEmanagedCertificate:
    domains:
    - argoworkflows.example.com
    enabled: false
  affinity: {}
  authModes: ["${auth_mode}"]
  autoscaling:
    behavior: {}
    enabled: false
    maxReplicas: 5
    minReplicas: 1
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  baseHref: /
  clusterWorkflowTemplates:
    enableEditing: true
    enabled: true
  deploymentAnnotations: {}
  enabled: true
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraInitContainers: []
  hostAliases: []
  image:
    registry: quay.io
    repository: argoproj/argocli
    tag: ""
  ingress:
    annotations: {}
    enabled: false
    extraPaths: []
    hosts: []
    ingressClassName: ""
    labels: {}
    pathType: Prefix
    paths:
    - /
    tls: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  logging:
    format: text
    globallevel: "0"
    level: info
  name: server
  nodeSelector:
    kubernetes.io/os: linux
  pdb:
    enabled: false
  podAnnotations: {}
  podLabels: {
    app: argo_webserver
  }
  podSecurityContext: {}
  priorityClassName: ""
  rbac:
    create: true
  replicas: 2
  resources: {}
  revisionHistoryLimit: 10
  secure: false
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
  serviceAccount:
    annotations: {}
    create: true
    labels: {}
    name: ""
  serviceAnnotations: {}
  serviceLabels: {}
  serviceNodePort: null
  servicePort: 2746
  servicePortName: ""
  serviceType: ClusterIP
  sso:
    enabled: true
    clientId:
      key: clientId
      name: argo-sso
    clientSecret:
      key: clientSecret
      name: argo-sso
    customGroupClaimName: ""
    insecureSkipVerify: true
    issuer: https://accounts.google.com
    issuerAlias: ""
    allowedDomains: ["getmeez.com"]
    rbac:
      enabled: true
      secretWhitelist: []
    redirectUrl: "https://${target_domain}/oauth2/callback"
    scopes: ["email"]
    sessionExpiry: "24h"
    userInfoPath: ""

  tmpVolume:
    emptyDir: {}
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
singleNamespace: false
useStaticCredentials: true
workflow:
  namespace: default
  rbac:
    create: false
    serviceAccounts: []
  serviceAccount:
    annotations: {}
    create: false
    labels: {}
    name: argo-workflow
    pullSecrets: []
