COMPUTED VALUES:
airflow:
  clusterDomain: cluster.local
  config: {}
  connections: []
  connectionsTemplates: {}
  connectionsUpdate: true
  dbMigrations:
    affinity: {}
    annotations: {}
    checkInterval: 300
    enabled: true
    labels: {}
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    runAsJob: false
    safeToEvict: true
    securityContext: {}
    tolerations: []
  defaultAffinity: {}
  defaultNodeSelector: {}
  defaultSecurityContext:
    fsGroup: 0
  defaultTolerations: []
  executor: CeleryExecutor
  extraContainers: []
  extraEnv: []
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  fernetKey: 7T512UXSSmBOkpWimFHIVb8jK6lfmSAvx4mO6Arehnc=
  image:
    gid: 0
    pullPolicy: IfNotPresent
    pullSecret: ""
    repository: quay.io/astronomer/ap-airflow
    tag: 2.3.4

  kubernetesPodTemplate:
    affinity: {}
    extraContainers: []
    extraInitContainers: []
    extraPipPackages: []
    extraVolumeMounts: []
    extraVolumes: []
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    securityContext: {}
    shareProcessNamespace: false
    stringOverride: ""
    tolerations: []
  legacyCommands: false
  localSettings:
    existingSecret: ""
    stringOverride: ""
  podAnnotations: {}
  pools: []
  poolsUpdate: true
  protectedPipPackages:
  - apache-airflow
  sync:
    affinity: {}
    annotations: {}
    labels: {}
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    safeToEvict: true
    securityContext: {}
    tolerations: []
  users:
  - email: admin@example.com
    firstName: admin
    lastName: admin
    password: admin
    role: Admin
    username: admin
  usersTemplates: {}
  usersUpdate: true
  variables: []
  variablesTemplates: {}
  variablesUpdate: true
  webserverSecretKey: THIS IS UNSAFE!
dags:
  gitSync:
    branch: main
    depth: 1
    enabled: true
    httpSecret: ""
    httpSecretPasswordKey: password
    httpSecretUsernameKey: username
    image:
      gid: 65533
      pullPolicy: IfNotPresent
      repository: registry.k8s.io/git-sync/git-sync
      tag: v3.6.5
      uid: 65533
    maxFailures: 0
    repo: https://github.com/kadreio/example-airflow-dag.git
    repoSubPath: ""
    resources: {}
    revision: HEAD
    sshKnownHosts: ""
    sshSecret: ""
    sshSecretKey: id_rsa
    subPath: ""
    submodules: recursive
    syncTimeout: 120
    syncWait: 60
  initContainer:
    enabled: true
  installRequirements: true
  path: /opt/airflow/dags
  persistence:
    accessMode: ReadOnlyMany
    enabled: false
    existingClaim: ""
    size: 1Gi
    storageClass: ""
    subPath: ""
externalDatabase:
  database: airflow
  host: localhost
  password: ""
  passwordSecret: ""
  passwordSecretKey: postgresql-password
  port: 5432
  properties: ""
  type: postgres
  user: airflow
  userSecret: ""
  userSecretKey: postgresql-user
externalRedis:
  databaseNumber: 1
  host: localhost
  password: ""
  passwordSecret: ""
  passwordSecretKey: redis-password
  port: 6379
  properties: ""
extraManifests: []
flower:
  affinity: {}
  annotations: {}
  basicAuthSecret: ""
  basicAuthSecretKey: ""
  enabled: true
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    apiVersion: policy/v1
    enabled: false
    maxUnavailable: ""
    minAvailable: ""
  podLabels: {}
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  replicas: 1
  resources: {}
  safeToEvict: true
  securityContext: {}
  service:
    annotations: {}
    externalPort: 5555
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort:
      http: null
    type: ClusterIP
  tolerations: []
ingress:
  apiVersion: networking.k8s.io/v1
  enabled: false
  flower:
    annotations: {}
    host: ""
    ingressClassName: ""
    labels: {}
    path: ""
    precedingPaths: []
    succeedingPaths: []
    tls:
      enabled: false
      secretName: ""
  web:
    annotations: {}
    host: ""
    ingressClassName: ""
    labels: {}
    path: ""
    precedingPaths: []
    succeedingPaths: []
    tls:
      enabled: false
      secretName: ""
logs:
  path: /opt/airflow/logs
  persistence:
    accessMode: ReadWriteMany
    enabled: false
    existingClaim: ""
    size: 1Gi
    storageClass: ""
    subPath: ""
pgbouncer:
  affinity: {}
  annotations: {}
  authType: md5
  clientSSL:
    caFile:
      existingSecret: ""
      existingSecretKey: root.crt
    certFile:
      existingSecret: ""
      existingSecretKey: client.crt
    ciphers: normal
    keyFile:
      existingSecret: ""
      existingSecretKey: client.key
    mode: prefer
  enabled: true
  image:
    gid: 1001
    pullPolicy: IfNotPresent
    repository: ghcr.io/airflow-helm/pgbouncer
    tag: 1.18.0-patch.1
    uid: 1001
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 60
  logConnections: 0
  logDisconnections: 0
  maxClientConnections: 1000
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    apiVersion: policy/v1
    enabled: false
    maxUnavailable: null
    minAvailable: null
  podLabels: {}
  poolSize: 20
  resources: {}
  safeToEvict: true
  securityContext: {}
  serverSSL:
    caFile:
      existingSecret: ""
      existingSecretKey: root.crt
    certFile:
      existingSecret: ""
      existingSecretKey: server.crt
    ciphers: normal
    keyFile:
      existingSecret: ""
      existingSecretKey: server.key
    mode: prefer
  startupProbe:
    enabled: true
    failureThreshold: 30
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 15
  terminationGracePeriodSeconds: 120
  tolerations: []
postgresql:
  enabled: true
  existingSecret: ""
  existingSecretKey: postgresql-password
  extraEnv: []
  global:
    postgresql: {}
  image:
    debug: false
    pullPolicy: IfNotPresent
    registry: ghcr.io
    repository: airflow-helm/postgresql-bitnami
    tag: 11.16-patch.0
  ldap:
    baseDN: ""
    bind_password: null
    bindDN: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    search_attr: ""
    search_filter: ""
    server: ""
    suffix: ""
    tls: false
    url: ""
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  master:
    affinity: {}
    annotations: {}
    extraInitContainers: |
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    nodeSelector: {}
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    podLabels: {}
    priorityClassName: ""
    sidecars: []
    tolerations: []
  metrics:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.8.0-debian-10-r28
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    securityContext:
      enabled: false
      runAsUser: 1001
    service:
      annotations:
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      loadBalancerIP: null
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
  networkPolicy:
    allowExternal: true
    enabled: false
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    mountPath: /bitnami/postgresql
    size: 8Gi
    storageClass: ""
    subPath: ""
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlDatabase: airflow
  postgresqlPassword: airflow
  postgresqlUsername: postgres
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replication:
    applicationName: my_application
    enabled: false
    numSynchronousReplicas: 0
    password: repl_password
    slaveReplicas: 1
    synchronousCommit: "off"
    user: repl_user
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    port: 5432
    type: ClusterIP
  serviceAccount:
    enabled: false
  shmVolume:
    chmod:
      enabled: true
    enabled: true
  slave:
    affinity: {}
    annotations: {}
    extraInitContainers: |
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    sidecars: []
    tolerations: []
  updateStrategy:
    type: RollingUpdate
  volumePermissions:
    enabled: false
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      tag: buster
    securityContext:
      runAsUser: 0
prometheusRule:
  additionalLabels: {}
  enabled: false
  groups: []
rbac:
  create: true
  events: true
redis:
  cluster:
    enabled: false
    slaveCount: 1
  clusterDomain: cluster.local
  configmap: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  enabled: true
  existingSecret: ""
  existingSecretPasswordKey: redis-password
  global:
    redis: {}
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: bitnami/redis
    tag: 5.0.14-debian-10-r173
  master:
    affinity: {}
    command: /run.sh
    configmap: null
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    extraFlags: []
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: false
      matchExpressions: {}
      matchLabels: {}
      path: /data
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    podLabels: {}
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    service:
      annotations: {}
      labels: {}
      loadBalancerIP: null
      port: 6379
      type: ClusterIP
    statefulset:
      updateStrategy: RollingUpdate
    tolerations: []
  metrics:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.4.0-debian-10-r3
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    service:
      annotations: {}
      labels: {}
      type: ClusterIP
    serviceMonitor:
      enabled: false
      selector:
        prometheus: kube-prometheus
  networkPolicy:
    enabled: false
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  password: airflow
  persistence: {}
  podSecurityPolicy:
    create: false
  rbac:
    create: false
    role:
      rules: []
  redisPort: 6379
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  sentinel:
    configmap: null
    downAfterMilliseconds: 60000
    enabled: false
    failoverTimeout: 18000
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 5.0.7-debian-10-r27
    initialCheckTimeout: 5
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    port: 26379
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    service:
      annotations: {}
      labels: {}
      loadBalancerIP: null
      redisPort: 6379
      sentinelPort: 26379
      type: ClusterIP
    staticID: false
    usePassword: true
  serviceAccount:
    create: false
    name: null
  slave:
    affinity: {}
    command: /run.sh
    configmap: null
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    extraFlags: []
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: false
      matchExpressions: {}
      matchLabels: {}
      path: /data
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    podLabels: {}
    port: 6379
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
    resources: {}
    service:
      annotations: {}
      labels: {}
      loadBalancerIP: null
      port: 6379
      type: ClusterIP
    statefulset:
      updateStrategy: RollingUpdate
    tolerations: []
  sysctlImage:
    command: []
    enabled: false
    mountHostSys: false
    pullPolicy: Always
    registry: docker.io
    repository: bitnami/minideb
    resources: {}
    tag: buster
  usePassword: true
  usePasswordFile: false
  volumePermissions:
    enabled: false
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      tag: buster
    resources: {}
scheduler:
  affinity: {}
  annotations: {}
  extraInitContainers: []
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 30
    taskCreationCheck:
      enabled: false
      schedulerAgeBeforeCheck: 180
      thresholdSeconds: 300
    timeoutSeconds: 60
  logCleanup:
    enabled: true
    intervalSeconds: 900
    resources: {}
    retentionMinutes: 21600
  nodeSelector: {}
  numRuns: -1
  podAnnotations: {}
  podDisruptionBudget:
    apiVersion: policy/v1
    enabled: false
    maxUnavailable: ""
    minAvailable: ""
  podLabels: {}
  replicas: 1
  resources: {}
  safeToEvict: true
  securityContext: {}
  tolerations: []
serviceAccount:
  annotations: {}
  create: true
  name: ""
serviceMonitor:
  enabled: false
  interval: 30s
  path: /admin/metrics
  selector:
    prometheus: kube-prometheus
triggerer:
  affinity: {}
  annotations: {}
  capacity: 1000
  enabled: true
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 60
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    apiVersion: policy/v1
    enabled: false
    maxUnavailable: ""
    minAvailable: ""
  podLabels: {}
  replicas: 1
  resources: {}
  safeToEvict: true
  securityContext: {}
  tolerations: []
web:
  affinity: {}
  annotations: {}
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    apiVersion: policy/v1
    enabled: false
    maxUnavailable: ""
    minAvailable: ""
  podLabels: {}
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  replicas: 1
  resources: {}
  safeToEvict: true
  securityContext: {}
  service:
    annotations: {}
    externalPort: 8080
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort:
      http: ""
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  tolerations: []
  webserverConfig:
    enabled: true
    existingSecret: ""
    stringOverride: ""
workers:
  affinity: {}
  annotations: {}
  autoscaling:
    apiVersion: autoscaling/v2
    enabled: false
    maxReplicas: 2
    metrics: []
  celery:
    gracefullTermination: false
    gracefullTerminationPeriod: 600
  enabled: true
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 60
  logCleanup:
    enabled: true
    intervalSeconds: 900
    resources: {}
    retentionMinutes: 21600
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    apiVersion: policy/v1
    enabled: false
    maxUnavailable: ""
    minAvailable: ""
  podLabels: {}
  replicas: 1
  resources: {}
  safeToEvict: true
  securityContext: {}
  terminationPeriod: 60
  tolerations: []
